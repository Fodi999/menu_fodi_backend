package services

import (
	"fmt"
	"log"

	"github.com/dmitrijfomin/menu-fodifood/backend/internal/database"
	"github.com/dmitrijfomin/menu-fodifood/backend/internal/models"
	"github.com/google/uuid"
)

// SubscriptionService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏
type SubscriptionService struct {
	tokenService *TokenService
}

// NewSubscriptionService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SubscriptionService
func NewSubscriptionService() *SubscriptionService {
	return &SubscriptionService{
		tokenService: NewTokenService(),
	}
}

// Subscribe - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç –≤ –±–∏–∑–Ω–µ—Å (–ø–æ–∫—É–ø–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã)
func (s *SubscriptionService) Subscribe(userID, businessID string, tokensAmount int64) (*models.BusinessSubscription, *models.Transaction, error) {
	db := database.GetDB()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
	var business models.Business
	if err := db.First(&business, "id = ?", businessID).Error; err != nil {
		return nil, nil, fmt.Errorf("business not found: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–∏–∑–Ω–µ—Å–∞
	var businessToken models.BusinessToken
	if err := db.Where("business_id = ?", businessID).First(&businessToken).Error; err != nil {
		return nil, nil, fmt.Errorf("business token not found: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤
	if businessToken.TotalSupply < tokensAmount {
		return nil, nil, fmt.Errorf("insufficient token supply: available %d, requested %d", businessToken.TotalSupply, tokensAmount)
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
	investmentAmount := businessToken.Price * float64(tokensAmount)

	// –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ë–î
	tx := db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
	var subscription models.BusinessSubscription
	err := tx.Where("user_id = ? AND business_id = ?", userID, businessID).First(&subscription).Error

	if err != nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
		subscription = models.BusinessSubscription{
			ID:          uuid.New().String(),
			UserID:      userID,
			BusinessID:  businessID,
			TokensOwned: tokensAmount,
			Invested:    investmentAmount,
		}

		if err := tx.Create(&subscription).Error; err != nil {
			tx.Rollback()
			return nil, nil, fmt.Errorf("failed to create subscription: %w", err)
		}
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
		subscription.TokensOwned += tokensAmount
		subscription.Invested += investmentAmount

		if err := tx.Save(&subscription).Error; err != nil {
			tx.Rollback()
			return nil, nil, fmt.Errorf("failed to update subscription: %w", err)
		}
	}

	// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏
	transaction := models.Transaction{
		ID:         uuid.New().String(),
		BusinessID: businessID,
		FromUser:   userID,
		ToUser:     business.OwnerID, // –í–ª–∞–¥–µ–ª–µ—Ü –±–∏–∑–Ω–µ—Å–∞ –ø–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω—å–≥–∏
		Tokens:     tokensAmount,
		Amount:     investmentAmount,
		TxType:     "buy",
	}

	if err := tx.Create(&transaction).Error; err != nil {
		tx.Rollback()
		return nil, nil, fmt.Errorf("failed to create transaction: %w", err)
	}

	// –£–º–µ–Ω—å—à–∞–µ–º supply —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ø–æ–∫—É–ø–∞–µ—Ç" –∏—Ö –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ supply)
	businessToken.TotalSupply -= tokensAmount
	if err := tx.Save(&businessToken).Error; err != nil {
		tx.Rollback()
		return nil, nil, fmt.Errorf("failed to update token supply: %w", err)
	}

	// –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ (–±–æ–ª—å—à–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ = –≤—ã—à–µ —Ü–µ–Ω–∞)
	newPrice := s.tokenService.calculateTokenPrice(businessID, businessToken.TotalSupply)
	businessToken.Price = newPrice
	if err := tx.Save(&businessToken).Error; err != nil {
		tx.Rollback()
		return nil, nil, fmt.Errorf("failed to update token price: %w", err)
	}

	// –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	if err := tx.Commit().Error; err != nil {
		return nil, nil, fmt.Errorf("failed to commit transaction: %w", err)
	}

	log.Printf("[SUBSCRIPTION] ‚úÖ User %s invested $%.2f in business %s (%s), bought %d tokens at $%.2f/token",
		userID, investmentAmount, business.Name, businessID, tokensAmount, businessToken.Price)

	return &subscription, &transaction, nil
}

// Unsubscribe - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–ø—Ä–æ–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ)
func (s *SubscriptionService) Unsubscribe(userID, businessID string) error {
	db := database.GetDB()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
	var subscription models.BusinessSubscription
	if err := db.Where("user_id = ? AND business_id = ?", userID, businessID).First(&subscription).Error; err != nil {
		return fmt.Errorf("subscription not found: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–∏–∑–Ω–µ—Å–∞
	var businessToken models.BusinessToken
	if err := db.Where("business_id = ?", businessID).First(&businessToken).Error; err != nil {
		return fmt.Errorf("business token not found: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ
	var business models.Business
	if err := db.First(&business, "id = ?", businessID).Error; err != nil {
		return fmt.Errorf("business not found: %w", err)
	}

	tokensToReturn := subscription.TokensOwned
	refundAmount := businessToken.Price * float64(tokensToReturn)

	// –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ë–î
	tx := db.Begin()
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏
	transaction := models.Transaction{
		ID:         uuid.New().String(),
		BusinessID: businessID,
		FromUser:   business.OwnerID, // –í–ª–∞–¥–µ–ª–µ—Ü "–≤—ã–∫—É–ø–∞–µ—Ç" —Ç–æ–∫–µ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ
		ToUser:     userID,
		Tokens:     tokensToReturn,
		Amount:     refundAmount,
		TxType:     "sell",
	}

	if err := tx.Create(&transaction).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("failed to create transaction: %w", err)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ supply
	businessToken.TotalSupply += tokensToReturn
	if err := tx.Save(&businessToken).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("failed to update token supply: %w", err)
	}

	// –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
	newPrice := s.tokenService.calculateTokenPrice(businessID, businessToken.TotalSupply)
	businessToken.Price = newPrice
	if err := tx.Save(&businessToken).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("failed to update token price: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	if err := tx.Delete(&subscription).Error; err != nil {
		tx.Rollback()
		return fmt.Errorf("failed to delete subscription: %w", err)
	}

	// –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	if err := tx.Commit().Error; err != nil {
		return fmt.Errorf("failed to commit transaction: %w", err)
	}

	log.Printf("[SUBSCRIPTION] ‚úÖ User %s unsubscribed from business %s (%s), sold %d tokens at $%.2f/token for $%.2f refund",
		userID, business.Name, businessID, tokensToReturn, businessToken.Price, refundAmount)

	return nil
}

// GetUserSubscriptions - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *SubscriptionService) GetUserSubscriptions(userID string) ([]models.BusinessSubscription, error) {
	db := database.GetDB()

	var subscriptions []models.BusinessSubscription
	if err := db.Where("user_id = ?", userID).Preload("Business").Find(&subscriptions).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch subscriptions: %w", err)
	}

	log.Printf("[SUBSCRIPTION] üìã Fetched %d subscriptions for user %s", len(subscriptions), userID)

	return subscriptions, nil
}

// GetBusinessSubscribers - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –±–∏–∑–Ω–µ—Å–∞
func (s *SubscriptionService) GetBusinessSubscribers(businessID string) ([]models.BusinessSubscription, error) {
	db := database.GetDB()

	var subscriptions []models.BusinessSubscription
	if err := db.Where("business_id = ?", businessID).Preload("User").Find(&subscriptions).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch subscribers: %w", err)
	}

	log.Printf("[SUBSCRIPTION] üìã Fetched %d subscribers for business %s", len(subscriptions), businessID)

	return subscriptions, nil
}

// GetSubscriptionStats - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
func (s *SubscriptionService) GetSubscriptionStats(userID, businessID string) (*models.BusinessSubscription, error) {
	db := database.GetDB()

	var subscription models.BusinessSubscription
	if err := db.Where("user_id = ? AND business_id = ?", userID, businessID).
		Preload("Business").
		First(&subscription).Error; err != nil {
		return nil, fmt.Errorf("subscription not found: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
	var businessToken models.BusinessToken
	if err := db.Where("business_id = ?", businessID).First(&businessToken).Error; err == nil {
		currentValue := businessToken.Price * float64(subscription.TokensOwned)
		log.Printf("[SUBSCRIPTION] üìä Subscription stats: User=%s, Business=%s, Tokens=%d, Invested=$%.2f, CurrentValue=$%.2f, Profit=$%.2f",
			userID, businessID, subscription.TokensOwned, subscription.Invested, currentValue, currentValue-subscription.Invested)
	}

	return &subscription, nil
}
