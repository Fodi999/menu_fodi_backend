package services

import (
	"fmt"
	"log"
	"math"

	"github.com/dmitrijfomin/menu-fodifood/backend/internal/database"
	"github.com/dmitrijfomin/menu-fodifood/backend/internal/models"
	"github.com/google/uuid"
)

// TokenService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –±–∏–∑–Ω–µ—Å–∞
type TokenService struct{}

// NewTokenService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TokenService
func NewTokenService() *TokenService {
	return &TokenService{}
}

// MintInitialToken —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞
func (s *TokenService) MintInitialToken(businessID string) (*models.BusinessToken, error) {
	db := database.GetDB()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
	var business models.Business
	if err := db.First(&business, "id = ?", businessID).Error; err != nil {
		return nil, fmt.Errorf("business not found: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω
	var existingToken models.BusinessToken
	if err := db.Where("business_id = ?", businessID).First(&existingToken).Error; err == nil {
		return &existingToken, nil // –¢–æ–∫–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ —Ç–æ–∫–µ–Ω–∞ (3 –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –Ω–∞–∑–≤–∞–Ω–∏—è + —Ä–∞–Ω–¥–æ–º)
	symbol := s.generateTokenSymbol(business.Name)

	// –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
	token := models.BusinessToken{
		ID:          uuid.New().String(),
		BusinessID:  businessID,
		Symbol:      symbol,
		TotalSupply: 1,
		Price:       19.0, // –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ $19
	}

	if err := db.Create(&token).Error; err != nil {
		return nil, fmt.Errorf("failed to create token: %w", err)
	}

	log.Printf("[TOKEN] ‚úÖ Initial token minted: Business=%s, Symbol=%s, Supply=1, Price=$19", businessID, symbol)
	return &token, nil
}

// CreateToken —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
func (s *TokenService) CreateToken(businessID, symbol string, initialPrice float64, totalSupply int64) (*models.BusinessToken, error) {
	db := database.GetDB()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
	var business models.Business
	if err := db.First(&business, "id = ?", businessID).Error; err != nil {
		return nil, fmt.Errorf("business not found: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω
	var existingToken models.BusinessToken
	if err := db.Where("business_id = ?", businessID).First(&existingToken).Error; err == nil {
		return nil, fmt.Errorf("token already exists for this business")
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
	token := models.BusinessToken{
		ID:          uuid.New().String(),
		BusinessID:  businessID,
		Symbol:      symbol,
		TotalSupply: totalSupply,
		Price:       initialPrice,
	}

	if err := db.Create(&token).Error; err != nil {
		return nil, fmt.Errorf("failed to create token: %w", err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º Business –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if err := db.Preload("Business").First(&token, "id = ?", token.ID).Error; err != nil {
		log.Printf("[TOKEN] ‚ö†Ô∏è Token created but failed to load business: %v", err)
	}

	log.Printf("[TOKEN] üÜï Manual token created: Business=%s, Symbol=%s, Supply=%d, Price=$%.2f",
		businessID, symbol, totalSupply, initialPrice)
	return &token, nil
}

// MintTokens —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ supply)
func (s *TokenService) MintTokens(businessID string, amount int64, reason string) (*models.BusinessToken, error) {
	db := database.GetDB()

	if amount <= 0 {
		return nil, fmt.Errorf("amount must be positive")
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
	var token models.BusinessToken
	if err := db.Where("business_id = ?", businessID).First(&token).Error; err != nil {
		return nil, fmt.Errorf("token not found for business: %w", err)
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ supply
	oldSupply := token.TotalSupply
	token.TotalSupply += amount

	// –ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞
	newPrice := s.calculateTokenPrice(businessID, token.TotalSupply)
	token.Price = newPrice

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	if err := db.Save(&token).Error; err != nil {
		return nil, fmt.Errorf("failed to update token: %w", err)
	}

	log.Printf("[TOKEN] ‚úÖ Minted: Business=%s, Amount=%d, Supply: %d‚Üí%d, Price: $%.2f‚Üí$%.2f, Reason=%s",
		businessID, amount, oldSupply, token.TotalSupply, 19.0, newPrice, reason)

	return &token, nil
}

// BurnTokens —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã (—É–º–µ–Ω—å—à–µ–Ω–∏–µ supply)
func (s *TokenService) BurnTokens(businessID string, amount int64, reason string) (*models.BusinessToken, error) {
	db := database.GetDB()

	if amount <= 0 {
		return nil, fmt.Errorf("amount must be positive")
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
	var token models.BusinessToken
	if err := db.Where("business_id = ?", businessID).First(&token).Error; err != nil {
		return nil, fmt.Errorf("token not found for business: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤
	if token.TotalSupply < amount {
		return nil, fmt.Errorf("insufficient token supply: have %d, want to burn %d", token.TotalSupply, amount)
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ supply
	oldSupply := token.TotalSupply
	token.TotalSupply -= amount

	// –ü–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–Ω—ã
	newPrice := s.calculateTokenPrice(businessID, token.TotalSupply)
	token.Price = newPrice

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	if err := db.Save(&token).Error; err != nil {
		return nil, fmt.Errorf("failed to update token: %w", err)
	}

	log.Printf("[TOKEN] üî• Burned: Business=%s, Amount=%d, Supply: %d‚Üí%d, Price: $%.2f‚Üí$%.2f, Reason=%s",
		businessID, amount, oldSupply, token.TotalSupply, 19.0, newPrice, reason)

	return &token, nil
}

// GetBusinessToken –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –±–∏–∑–Ω–µ—Å–∞
func (s *TokenService) GetBusinessToken(businessID string) (*models.BusinessToken, error) {
	db := database.GetDB()

	var token models.BusinessToken
	if err := db.Where("business_id = ?", businessID).Preload("Business").First(&token).Error; err != nil {
		return nil, fmt.Errorf("token not found: %w", err)
	}

	return &token, nil
}

// calculateTokenPrice —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞
func (s *TokenService) calculateTokenPrice(businessID string, supply int64) float64 {
	db := database.GetDB()

	// –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
	basePrice := 19.0

	// 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤)
	var subscriptionCount int64
	db.Model(&models.BusinessSubscription{}).Where("business_id = ?", businessID).Count(&subscriptionCount)

	// 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
	var totalInvested float64
	db.Model(&models.BusinessSubscription{}).
		Where("business_id = ?", businessID).
		Select("COALESCE(SUM(invested), 0)").
		Scan(&totalInvested)

	// 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
	var transactionCount int64
	db.Model(&models.Transaction{}).Where("business_id = ?", businessID).Count(&transactionCount)

	// –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã:
	// Price = BasePrice * (1 + supply_multiplier + investor_multiplier + transaction_multiplier)
	
	// –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç supply (–∫–∞–∂–¥—ã–µ 10 —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–±–∞–≤–ª—è—é—Ç 5%)
	supplyMultiplier := float64(supply) / 10.0 * 0.05

	// –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ (–∫–∞–∂–¥—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç 2%)
	investorMultiplier := float64(subscriptionCount) * 0.02

	// –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç –æ–±—ä–µ–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (–∫–∞–∂–¥—ã–µ $100 –¥–æ–±–∞–≤–ª—è—é—Ç 1%)
	investmentMultiplier := (totalInvested / 100.0) * 0.01

	// –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∫–∞–∂–¥—ã–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ–±–∞–≤–ª—è—é—Ç 1%)
	transactionMultiplier := float64(transactionCount) / 5.0 * 0.01

	// –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞
	totalMultiplier := 1.0 + supplyMultiplier + investorMultiplier + investmentMultiplier + transactionMultiplier
	newPrice := basePrice * totalMultiplier

	// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã (–º–∞–∫—Å–∏–º—É–º 10x –æ—Ç –±–∞–∑–æ–≤–æ–π)
	maxPrice := basePrice * 10.0
	if newPrice > maxPrice {
		newPrice = maxPrice
	}

	// –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤
	newPrice = math.Round(newPrice*100) / 100

	log.Printf("[TOKEN] üìä Price calculation: Business=%s, Supply=%d, Investors=%d, Invested=$%.2f, Txs=%d ‚Üí Price=$%.2f (multiplier=%.2f)",
		businessID, supply, subscriptionCount, totalInvested, transactionCount, newPrice, totalMultiplier)

	return newPrice
}

// generateTokenSymbol –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
func (s *TokenService) generateTokenSymbol(businessName string) string {
	// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞ (–∏–ª–∏ –º–µ–Ω—å—à–µ) –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
	runes := []rune(businessName)
	symbolLength := 3
	if len(runes) < symbolLength {
		symbolLength = len(runes)
	}

	symbol := string(runes[:symbolLength])
	
	// –î–æ–±–∞–≤–ª—è–µ–º "T" (Token) –≤ –∫–æ–Ω–µ—Ü
	return symbol + "T"
}

// RecalculatePrice –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
func (s *TokenService) RecalculatePrice(businessID string) (*models.BusinessToken, error) {
	db := database.GetDB()

	var token models.BusinessToken
	if err := db.Where("business_id = ?", businessID).First(&token).Error; err != nil {
		return nil, fmt.Errorf("token not found: %w", err)
	}

	oldPrice := token.Price
	newPrice := s.calculateTokenPrice(businessID, token.TotalSupply)
	token.Price = newPrice

	if err := db.Save(&token).Error; err != nil {
		return nil, fmt.Errorf("failed to update price: %w", err)
	}

	log.Printf("[TOKEN] üí∞ Price recalculated: Business=%s, $%.2f ‚Üí $%.2f", businessID, oldPrice, newPrice)
	return &token, nil
}
