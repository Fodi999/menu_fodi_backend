package handlers

import (
	"encoding/json"
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/dmitrijfomin/menu-fodifood/backend/internal/auth"
	"github.com/gorilla/websocket"
)

const (
	// –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	writeWait = 10 * time.Second
	// –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —á—Ç–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ pong —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
	pongWait = 60 * time.Second
	// –ü–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping –∫–ª–∏–µ–Ω—Ç—É (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ pongWait)
	pingPeriod = (pongWait * 9) / 10
	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
	maxMessageSize = 512
)

var (
	upgrader = websocket.Upgrader{
		ReadBufferSize:    1024,
		WriteBufferSize:   1024,
		EnableCompression: true,
		HandshakeTimeout:  5 * time.Second,
		CheckOrigin: func(r *http.Request) bool {
			origin := r.Header.Get("Origin")

			// –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
			allowed := []string{
				"http://localhost:3000",       // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Next.js
				"http://localhost:8080",       // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Backend
				"https://admin.fodifood.ru",   // –ü—Ä–æ–¥–∞–∫—à–µ–Ω –∞–¥–º–∏–Ω–∫–∞
				"https://menu.fodifood.ru",    // –ü—Ä–æ–¥–∞–∫—à–µ–Ω –º–µ–Ω—é
				"https://fodifood.vercel.app", // Vercel deployment
			}

			// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ localhost
			if origin == "" {
				return true // WebSocket –∏–∑ —Ç–æ–≥–æ –∂–µ –¥–æ–º–µ–Ω–∞
			}

			for _, o := range allowed {
				if origin == o {
					return true
				}
			}

			log.Printf("üö´ Blocked WebSocket origin: %s", origin)
			return false
		},
	}

	// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
	clients     = make(map[*Client]bool)
	clientsLock sync.RWMutex
)

// InitWebSocketHub –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç WebSocket Hub
// –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
func InitWebSocketHub() {
	log.Println("üì° Starting WebSocket Hub...")
	// Hub —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

// Client –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç WebSocket –∫–ª–∏–µ–Ω—Ç–∞
type Client struct {
	Conn     *websocket.Conn
	Send     chan []byte
	LastSeen time.Time // –ú–µ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	once     sync.Once // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
}

// WebSocketMessage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
type WebSocketMessage struct {
	Type string      `json:"type"` // "new_order", "order_updated", "order_cancelled"
	Data interface{} `json:"data"`
}

// disconnect –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
func (c *Client) disconnect() {
	c.once.Do(func() {
		// –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
		clientsLock.Lock()
		delete(clients, c)
		totalClients := len(clients)
		clientsLock.Unlock()

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç writePump –µ—Å–ª–∏ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
		close(c.Send)

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		c.Conn.Close()

		log.Printf("üîå Client disconnected (was active: %v ago, remaining: %d)", 
			time.Since(c.LastSeen), totalClients)
	})
}

// validateAdminToken –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JWT
func validateAdminToken(token string) bool {
	if token == "" {
		return false
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
	claims, err := auth.ValidateToken(token)
	if err != nil {
		log.Printf("üö´ Invalid JWT token: %v", err)
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if claims.Role != "admin" {
		log.Printf("üö´ User %s is not an admin (role: %s)", claims.Email, claims.Role)
		return false
	}

	log.Printf("‚úÖ Admin authenticated: %s (ID: %s)", claims.Email, claims.UserID)
	return true
}

// readPump —á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket –∫–ª–∏–µ–Ω—Ç–∞
func (c *Client) readPump() {
	defer c.disconnect()

	c.Conn.SetReadLimit(maxMessageSize)
	c.Conn.SetReadDeadline(time.Now().Add(pongWait))
	c.Conn.SetPongHandler(func(string) error {
		c.Conn.SetReadDeadline(time.Now().Add(pongWait))
		c.LastSeen = time.Now() // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ pong
		return nil
	})

	for {
		_, _, err := c.Conn.ReadMessage()
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				log.Printf("‚ùå WebSocket error: %v", err)
			}
			break
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		c.LastSeen = time.Now()
	}
}

// writePump –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç—É
func (c *Client) writePump() {
	ticker := time.NewTicker(pingPeriod)
	defer ticker.Stop()

	for {
		select {
		case message, ok := <-c.Send:
			c.Conn.SetWriteDeadline(time.Now().Add(writeWait))
			if !ok {
				// –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç
				_ = c.Conn.WriteMessage(websocket.CloseMessage, []byte{})
				c.disconnect()
				return
			}

			if err := c.Conn.WriteMessage(websocket.TextMessage, message); err != nil {
				log.Printf("‚ùå Error sending message: %v", err)
				c.disconnect()
				return
			}

		case <-ticker.C:
			c.Conn.SetWriteDeadline(time.Now().Add(writeWait))
			if err := c.Conn.WriteMessage(websocket.PingMessage, nil); err != nil {
				c.disconnect()
				return
			}
		}
	}
}

// HandleWebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func HandleWebSocket(w http.ResponseWriter, r *http.Request) {
	log.Printf("[WS] üìû New WebSocket connection attempt from: %s", r.RemoteAddr)
	log.Printf("[WS] üìç Origin: %s", r.Header.Get("Origin"))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
	token := r.URL.Query().Get("token")
	if token == "" {
		authHeader := r.Header.Get("Authorization")
		if len(authHeader) > 7 && authHeader[:7] == "Bearer " {
			token = authHeader[7:]
		}
	}

	if token == "" {
		log.Printf("[WS] ‚ùå No token provided")
		http.Error(w, "Unauthorized: No token provided", http.StatusUnauthorized)
		return
	}

	if !validateAdminToken(token) {
		log.Printf("[WS] ‚ùå Invalid admin token")
		log.Printf("[WS] ‚ùå Token rejected, cannot upgrade WS for %s", r.RemoteAddr)
		http.Error(w, "Unauthorized: Invalid admin credentials", http.StatusUnauthorized)
		return
	}

	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("[WS] ‚ùå WebSocket upgrade error: %v", err)
		return
	}

	// –í–∫–ª—é—á–∞–µ–º –∫–æ–º–ø—Ä–µ—Å—Å–∏—é –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
	conn.EnableWriteCompression(true)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é (–¥–æ –∑–∞–ø—É—Å–∫–∞ –≥–æ—Ä—É—Ç–∏–Ω)
	welcomeMsg := WebSocketMessage{
		Type: "connected",
		Data: map[string]string{
			"message": "Connected to admin order notifications",
			"status":  "ready",
		},
	}
	conn.SetWriteDeadline(time.Now().Add(writeWait))
	if err := conn.WriteJSON(welcomeMsg); err != nil {
		log.Printf("[WS] ‚ö†Ô∏è Could not send welcome message: %v", err)
		conn.Close()
		return
	}
	log.Printf("[WS] üì§ Welcome message sent to admin")

	client := &Client{
		Conn:     conn,
		Send:     make(chan []byte, 256),
		LastSeen: time.Now(), // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
	clientsLock.Lock()
	clients[client] = true
	totalClients := len(clients)
	clientsLock.Unlock()

	log.Printf("[WS] ‚úÖ Admin connected: %s (total active: %d)", r.RemoteAddr, totalClients)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
	go client.writePump()
	go client.readPump()
}

// BroadcastOrderNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
func BroadcastOrderNotification(messageType string, data interface{}) {
	message := WebSocketMessage{
		Type: messageType,
		Data: data,
	}

	messageBytes, err := json.Marshal(message)
	if err != nil {
		log.Printf("‚ùå Error marshaling broadcast message: %v", err)
		return
	}

	var toRemove []*Client
	sentCount := 0

	// –ß–∏—Ç–∞–µ–º –ø–æ–¥ RLock
	clientsLock.RLock()
	for client := range clients {
		select {
		case client.Send <- messageBytes:
			sentCount++
		default:
			// –ö–∞–Ω–∞–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
			log.Printf("‚ö†Ô∏è Client channel full, scheduling removal")
			toRemove = append(toRemove, client)
		}
	}
	clientsLock.RUnlock()

	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–¥ –æ–±—ã—á–Ω—ã–º Lock
	if len(toRemove) > 0 {
		for _, c := range toRemove {
			c.disconnect()
		}
		log.Printf("üóëÔ∏è Removed %d unresponsive clients", len(toRemove))
	}

	log.Printf("üì° Broadcast sent: type=%s to %d clients", messageType, sentCount)
}

// GetActiveConnectionsCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
func GetActiveConnectionsCount() int {
	clientsLock.RLock()
	defer clientsLock.RUnlock()
	return len(clients)
}

// CloseAllConnections –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è graceful shutdown)
func CloseAllConnections() {
	clientsLock.RLock()
	clientsCopy := make([]*Client, 0, len(clients))
	for client := range clients {
		clientsCopy = append(clientsCopy, client)
	}
	totalClients := len(clientsCopy)
	clientsLock.RUnlock()

	log.Printf("üîå Closing all WebSocket connections (%d clients)", totalClients)

	for _, client := range clientsCopy {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
		client.Conn.SetWriteDeadline(time.Now().Add(writeWait))
		client.Conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseGoingAway, "Server shutdown"))
		
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π disconnect
		client.disconnect()
	}

	log.Printf("‚úÖ All WebSocket connections closed")
}
