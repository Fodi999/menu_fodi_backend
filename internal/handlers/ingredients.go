package handlers

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"github.com/dmitrijfomin/menu-fodifood/backend/internal/database"
	"github.com/dmitrijfomin/menu-fodifood/backend/internal/models"
	"github.com/dmitrijfomin/menu-fodifood/backend/pkg/utils"
	"github.com/google/uuid"
	"github.com/gorilla/mux"
)

var ingredientRepo = &database.IngredientRepository{}

// GetAllIngredients –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å–æ —Å–∫–ª–∞–¥—Å–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
func GetAllIngredients(w http.ResponseWriter, r *http.Request) {
	stockItems, err := ingredientRepo.FindAll()
	if err != nil {
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to fetch ingredients")
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ StockItem –æ–±—ä–µ–∫—Ç—ã —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º Ingredient
	utils.RespondWithJSON(w, http.StatusOK, stockItems)
}

// GetIngredient –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
func GetIngredient(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]

	stockItem, err := ingredientRepo.FindByID(id)
	if err != nil {
		utils.RespondWithError(w, http.StatusNotFound, "Ingredient not found")
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π StockItem —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º Ingredient
	utils.RespondWithJSON(w, http.StatusOK, stockItem)
}

// CreateIngredient —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
func CreateIngredient(w http.ResponseWriter, r *http.Request) {
	var req models.CreateIngredientRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		utils.RespondWithError(w, http.StatusBadRequest, "Invalid request")
		return
	}

	log.Printf("üì• CreateIngredient Request: %+v\n", req)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
	if req.Name == "" {
		utils.RespondWithError(w, http.StatusBadRequest, "Name is required")
		return
	}
	if req.Unit == "" {
		utils.RespondWithError(w, http.StatusBadRequest, "Unit is required")
		return
	}

	// üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
	if autoUnit := detectDefaultUnit(req.Name); autoUnit != "" {
		req.Unit = autoUnit
	}

	// –°–æ–∑–¥–∞—ë–º —Å–∞–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
	ingredient := &models.Ingredient{
		ID:        uuid.New().String(),
		Name:      req.Name,
		Unit:      req.Unit,
		CreatedAt: time.Now(),
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏
	batchNumber := generateBatchNumber(req.Name)

	// –°–æ–∑–¥–∞—ë–º —Å–∫–ª–∞–¥—Å–∫—É—é –∑–∞–ø–∏—Å—å
	stockItem := &models.StockItem{
		ID:           uuid.New().String(),
		IngredientID: ingredient.ID,
		Quantity:     req.Quantity,
		UpdatedAt:    time.Now(),
		BatchNumber:  &batchNumber,
	}

	// üí° –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è: —Å–æ–∑–¥–∞—ë–º —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ req
	if req.BruttoWeight > 0 {
		val := req.BruttoWeight
		stockItem.BruttoWeight = &val
	}
	if req.NettoWeight > 0 {
		val := req.NettoWeight
		stockItem.NettoWeight = &val
	}
	if req.WastePercentage >= 0 {
		val := req.WastePercentage
		stockItem.WastePercentage = &val
	}
	if req.ExpiryDays > 0 {
		val := req.ExpiryDays
		stockItem.ExpiryDays = &val
	}
	if req.Supplier != "" {
		val := req.Supplier
		stockItem.Supplier = &val
	}
	if req.Category != "" {
		val := req.Category
		stockItem.Category = &val
	}
	if req.PriceBrutto > 0 {
		val := req.PriceBrutto
		stockItem.PriceBrutto = &val
	}
	if req.PriceNetto > 0 {
		val := req.PriceNetto
		stockItem.PriceNetto = &val
	}
	if req.PricePerUnit > 0 {
		val := req.PricePerUnit
		stockItem.PricePerUnit = &val
	}

	log.Printf("üì¶ StockItem before save (Batch: %s): %+v\n", batchNumber, stockItem)

	if err := ingredientRepo.CreateIngredient(ingredient, stockItem); err != nil {
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to create ingredient")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª—å–Ω–æ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º bruttoWeight –∏–ª–∏ nettoWeight –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
	movementQuantity := req.Quantity
	if movementQuantity == 0 && req.BruttoWeight > 0 {
		movementQuantity = req.BruttoWeight
	}
	if movementQuantity == 0 && req.NettoWeight > 0 {
		movementQuantity = req.NettoWeight
	}

	if movementQuantity > 0 {
		movement := &models.StockMovement{
			ID:          uuid.New().String(),
			StockItemID: stockItem.ID,
			Type:        "addition",
			Quantity:    movementQuantity,
			PriceBrutto: stockItem.PriceBrutto,
			PriceNetto:  stockItem.PriceNetto,
			CreatedAt:   time.Now(),
		}
		note := "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
		movement.Note = &note

		if err := database.DB.Create(movement).Error; err != nil {
			log.Printf("‚ö†Ô∏è Failed to create stock movement: %v", err)
		} else {
			log.Printf("‚úÖ Created stock movement: %s for %.2f units", movement.ID, movementQuantity)
		}
	}

	stockItem.Ingredient = ingredient

	utils.RespondWithJSON(w, http.StatusCreated, stockItem)
}

// UpdateIngredient –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
func UpdateIngredient(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]

	var req models.UpdateIngredientRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		utils.RespondWithError(w, http.StatusBadRequest, "Invalid request")
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º —Å–∫–ª–∞–¥—Å–∫–æ–π –æ—Å—Ç–∞—Ç–æ–∫
	stockItem, err := ingredientRepo.FindByID(id)
	if err != nil {
		utils.RespondWithError(w, http.StatusNotFound, "Ingredient not found")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
	if req.Name != "" {
		stockItem.Ingredient.Name = req.Name
	}
	if req.Unit != "" {
		stockItem.Ingredient.Unit = req.Unit
	} else if req.Name != "" {
		// üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
		if autoUnit := detectDefaultUnit(req.Name); autoUnit != "" {
			stockItem.Ingredient.Unit = autoUnit
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–ª–∞–¥—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
	stockItem.Quantity = req.Quantity
	if req.BruttoWeight > 0 {
		val := req.BruttoWeight
		stockItem.BruttoWeight = &val
	}
	if req.NettoWeight > 0 {
		val := req.NettoWeight
		stockItem.NettoWeight = &val
	}
	if req.WastePercentage >= 0 {
		val := req.WastePercentage
		stockItem.WastePercentage = &val
	}
	if req.ExpiryDays > 0 {
		val := req.ExpiryDays
		stockItem.ExpiryDays = &val
	}
	if req.Supplier != "" {
		val := req.Supplier
		stockItem.Supplier = &val
	}
	if req.Category != "" {
		val := req.Category
		stockItem.Category = &val
	}
	if req.PriceBrutto > 0 {
		val := req.PriceBrutto
		stockItem.PriceBrutto = &val
	}
	if req.PriceNetto > 0 {
		val := req.PriceNetto
		stockItem.PriceNetto = &val
	}
	if req.PricePerUnit > 0 {
		val := req.PricePerUnit
		stockItem.PricePerUnit = &val
	}
	stockItem.UpdatedAt = time.Now()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	if err := ingredientRepo.UpdateIngredient(stockItem.Ingredient); err != nil {
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to update ingredient")
		return
	}

	if err := ingredientRepo.UpdateStockItem(stockItem); err != nil {
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to update stock")
		return
	}

	utils.RespondWithJSON(w, http.StatusOK, stockItem)
}

// DeleteIngredient —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
func DeleteIngredient(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]

	if err := ingredientRepo.DeleteStockItem(id); err != nil {
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to delete ingredient")
		return
	}

	utils.RespondWithJSON(w, http.StatusOK, map[string]string{"message": "Ingredient deleted successfully"})
}

// GetStockMovements –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞
func GetStockMovements(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	stockItemID := vars["id"]

	var movements []models.StockMovement
	result := database.DB.
		Where("\"stockItemId\" = ?", stockItemID).
		Order("\"createdAt\" DESC").
		Limit(20).
		Find(&movements)

	if result.Error != nil {
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to fetch stock movements")
		return
	}

	utils.RespondWithJSON(w, http.StatusOK, movements)
}

// detectDefaultUnit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞
func detectDefaultUnit(name string) string {
	nameLower := strings.ToLower(name)

	defaultUnits := map[string]string{
		"–º—É–∫":    "kg",
		"—Å–∞—Ö–∞—Ä":  "kg",
		"—Ä–∏—Å":    "kg",
		"–∫—Ä—É–ø":   "kg",
		"—Å–æ–ª—å":   "kg",
		"–≤–æ–¥–∞":   "l",
		"–º–∞—Å–ª–æ":  "ml",
		"–º–æ–ª–æ–∫":  "l",
		"—è–π—Ü":    "pcs",
		"–ª–æ—Å–æ—Å":  "kg",
		"—Å—ë–º–≥":   "kg",
		"—Ç—É–Ω–µ—Ü":  "kg",
		"–∫—Ä–µ–≤–µ":  "kg",
		"—É–≥–æ—Ä":   "kg",
		"—Å—ã—Ä":    "kg",
		"—Å–æ—É—Å":   "ml",
		"—É–∫—Å—É—Å":  "ml",
		"–Ω–æ—Ä–∏":   "pcs",
		"–≤–∞—Å–∞–±–∏": "kg",
		"–∏–º–±–∏—Ä":  "kg",
		"–∞–≤–æ–∫–∞":  "pcs",
		"–æ–≥—É—Ä–µ":  "pcs",
	}

	for key, unit := range defaultUnits {
		if strings.Contains(nameLower, key) {
			log.Printf("‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ '%s' –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ '%s'", unit, name)
			return unit
		}
	}

	return "" // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –Ω–µ –º–µ–Ω—è–µ–º
}

// generateBatchNumber –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏
func generateBatchNumber(ingredientName string) string {
	now := time.Now()

	// –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 3 —Ä—É–Ω—ã (—Å–∏–º–≤–æ–ª–∞) –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8
	runes := []rune(ingredientName)
	prefix := ""
	if len(runes) >= 3 {
		prefix = string(runes[:3])
	} else {
		prefix = string(runes)
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
	prefix = strings.ToUpper(strings.ReplaceAll(prefix, " ", ""))

	// –§–æ—Ä–º–∞—Ç: –ö–†–ï-20251006-020417 (3 –±—É–∫–≤—ã-–¥–∞—Ç–∞-–≤—Ä–µ–º—è)
	return fmt.Sprintf("%s-%s-%s",
		prefix,
		now.Format("20060102"),
		now.Format("150405"))
}
