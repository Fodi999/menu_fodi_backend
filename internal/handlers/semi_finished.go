package handlers

import (
	"encoding/json"
	"log"
	"math"
	"net/http"
	"strings"
	"time"

	"github.com/dmitrijfomin/menu-fodifood/backend/internal/database"
	"github.com/dmitrijfomin/menu-fodifood/backend/internal/models"
	"github.com/dmitrijfomin/menu-fodifood/backend/pkg/utils"

	"github.com/google/uuid"
	"github.com/gorilla/mux"
)

// normalizeFloat –æ–∫—Ä—É–≥–ª—è–µ—Ç —á–∏—Å–ª–æ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
func normalizeFloat(value float64, decimals int) float64 {
	mult := math.Pow(10, float64(decimals))
	return math.Round(value*mult) / mult
}

// convertToBaseUnit –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
// –ì—Ä–∞–º–º—ã ‚Üí –∫–≥, –ú–∏–ª–ª–∏–ª–∏—Ç—Ä—ã ‚Üí –ª–∏—Ç—Ä—ã
func convertToBaseUnit(value float64, unit string) float64 {
	switch strings.ToLower(unit) {
	case "g":
		return value / 1000
	case "ml":
		return value / 1000
	default:
		return value
	}
}

// calculateCostPerUnit —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞
// –£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
func calculateCostPerUnit(ingredients []models.SemiFinishedIngredientInput, outputQty float64) float64 {
	var totalCost float64
	for _, ing := range ingredients {
		qty := convertToBaseUnit(ing.Quantity, ing.Unit)
		totalCost += qty * ing.PricePerUnit
	}
	if outputQty == 0 {
		return 0
	}
	return normalizeFloat(totalCost/outputQty, 2)
}

// GetSemiFinished –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–æ–≤
func GetSemiFinished(w http.ResponseWriter, r *http.Request) {
	var semiFinished []models.SemiFinished

	// –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Å–ø–∏—Å–∫–∞, —Ç–æ–ª—å–∫–æ –¥–ª—è GetByID
	if err := database.DB.Omit("Ingredients").Order("created_at DESC").Find(&semiFinished).Error; err != nil {
		log.Printf("Error fetching semi-finished: %v", err)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to fetch semi-finished")
		return
	}

	utils.RespondWithJSON(w, http.StatusOK, semiFinished)
}

// GetSemiFinishedByID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç –ø–æ ID —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
func GetSemiFinishedByID(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]

	var sf models.SemiFinished
	if err := database.DB.First(&sf, "id = ?", id).Error; err != nil {
		if err.Error() == "record not found" {
			utils.RespondWithError(w, http.StatusNotFound, "Semi-finished not found")
			return
		}
		log.Printf("Error fetching semi-finished: %v", err)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to fetch semi-finished")
		return
	}

	utils.RespondWithJSON(w, http.StatusOK, sf)
}

// CreateSemiFinished —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç
func CreateSemiFinished(w http.ResponseWriter, r *http.Request) {
	var req models.CreateSemiFinishedRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		utils.RespondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è
	if req.Name == "" {
		utils.RespondWithError(w, http.StatusBadRequest, "Name is required")
		return
	}
	if req.OutputQuantity <= 0 {
		utils.RespondWithError(w, http.StatusBadRequest, "Output quantity must be positive")
		return
	}
	if req.OutputUnit == "" {
		utils.RespondWithError(w, http.StatusBadRequest, "Output unit is required")
		return
	}
	if len(req.Ingredients) == 0 {
		utils.RespondWithError(w, http.StatusBadRequest, "At least one ingredient is required")
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
	for i, ing := range req.Ingredients {
		if ing.IngredientID == "" {
			utils.RespondWithError(w, http.StatusBadRequest, "Ingredient ID is required for all ingredients")
			return
		}
		if ing.IngredientName == "" {
			utils.RespondWithError(w, http.StatusBadRequest, "Ingredient name is required for all ingredients")
			return
		}
		if ing.Unit == "" {
			utils.RespondWithError(w, http.StatusBadRequest, "Unit is required for all ingredients")
			return
		}
		if ing.Quantity <= 0 {
			utils.RespondWithError(w, http.StatusBadRequest, "Ingredient quantity must be positive")
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ –ë–î
		var existingIngredient models.Ingredient
		if err := database.DB.First(&existingIngredient, "id = ?", ing.IngredientID).Error; err != nil {
			log.Printf("Ingredient #%d not found: ID=%s, Error=%v", i+1, ing.IngredientID, err)
			utils.RespondWithError(w, http.StatusBadRequest, "Ingredient with ID '"+ing.IngredientID+"' does not exist")
			return
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
	var exists int64
	database.DB.Model(&models.SemiFinished{}).
		Where("LOWER(name) = LOWER(?)", req.Name).
		Count(&exists)
	if exists > 0 {
		utils.RespondWithError(w, http.StatusConflict, "Semi-finished with this name already exists")
		return
	}

	// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	for i := range req.Ingredients {
		req.Ingredients[i].Quantity = normalizeFloat(req.Ingredients[i].Quantity, 3)
		req.Ingredients[i].PricePerUnit = normalizeFloat(req.Ingredients[i].PricePerUnit, 2)
		req.Ingredients[i].TotalPrice = normalizeFloat(req.Ingredients[i].TotalPrice, 2)
	}
	req.OutputQuantity = normalizeFloat(req.OutputQuantity, 3)

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Å —É—á—ë—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü
	costPerUnit := calculateCostPerUnit(req.Ingredients, req.OutputQuantity)
	totalCost := normalizeFloat(costPerUnit*req.OutputQuantity, 2)

	// –°–æ–∑–¥–∞—ë–º –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç
	id := uuid.New().String()
	now := time.Now()

	var description *string
	if req.Description != "" {
		description = &req.Description
	}

	sf := models.SemiFinished{
		ID:             id,
		Name:           req.Name,
		Description:    description,
		OutputQuantity: req.OutputQuantity,
		OutputUnit:     req.OutputUnit,
		CostPerUnit:    costPerUnit,
		TotalCost:      totalCost,
		Category:       req.Category,
		IsVisible:      true,
		IsArchived:     false,
		CreatedAt:      now,
		UpdatedAt:      now,
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx := database.DB.Begin()
	if tx.Error != nil {
		log.Printf("Error starting transaction: %v", tx.Error)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to create semi-finished")
		return
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// –°–æ–∑–¥–∞—ë–º –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç
	if err := tx.Create(&sf).Error; err != nil {
		tx.Rollback()
		log.Printf("Error creating semi-finished: %v", err)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to create semi-finished")
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
	for _, ing := range req.Ingredients {
		log.Printf("Adding ingredient: ID=%s, Name=%s, Qty=%.3f %s, Price=%.2f",
			ing.IngredientID, ing.IngredientName, ing.Quantity, ing.Unit, ing.PricePerUnit)

		ingredient := models.SemiFinishedIngredient{
			ID:             uuid.New().String(),
			SemiFinishedID: id,
			IngredientID:   ing.IngredientID,
			IngredientName: ing.IngredientName,
			Quantity:       ing.Quantity,
			Unit:           ing.Unit,
			PricePerUnit:   ing.PricePerUnit,
			TotalPrice:     ing.TotalPrice,
		}
		if err := tx.Create(&ingredient).Error; err != nil {
			tx.Rollback()
			log.Printf("Error adding ingredient to semi-finished: %v", err)
			utils.RespondWithError(w, http.StatusInternalServerError, "Failed to add ingredients")
			return
		}
	}

	// –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err := tx.Commit().Error; err != nil {
		log.Printf("Error committing transaction: %v", err)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to save semi-finished")
		return
	}

	log.Printf("üì¶ Semi-finished '%s' —Å–æ–∑–¥–∞–Ω: %.3f %s, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å = %.2f ‚ÇΩ/–µ–¥, –≤—Å–µ–≥–æ = %.2f ‚ÇΩ (ID: %s)",
		req.Name, req.OutputQuantity, req.OutputUnit, sf.CostPerUnit, sf.TotalCost, id)
	utils.RespondWithJSON(w, http.StatusCreated, sf)
}

// UpdateSemiFinished –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç
func UpdateSemiFinished(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]

	var req models.UpdateSemiFinishedRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		utils.RespondWithError(w, http.StatusBadRequest, "Invalid request payload")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç–∞
	var sf models.SemiFinished
	if err := database.DB.First(&sf, "id = ?", id).Error; err != nil {
		utils.RespondWithError(w, http.StatusNotFound, "Semi-finished not found")
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
	if req.Name != nil && *req.Name != "" {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
		var exists int64
		database.DB.Model(&models.SemiFinished{}).
			Where("LOWER(name) = LOWER(?) AND id != ?", *req.Name, id).
			Count(&exists)
		if exists > 0 {
			utils.RespondWithError(w, http.StatusConflict, "Semi-finished with this name already exists")
			return
		}
		sf.Name = *req.Name
	}

	if req.Description != nil {
		sf.Description = req.Description
	}

	if req.Category != nil {
		sf.Category = *req.Category
	}

	if req.OutputUnit != nil {
		sf.OutputUnit = *req.OutputUnit
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
	if len(req.Ingredients) > 0 {
		// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
		for i := range req.Ingredients {
			req.Ingredients[i].Quantity = normalizeFloat(req.Ingredients[i].Quantity, 3)
			req.Ingredients[i].PricePerUnit = normalizeFloat(req.Ingredients[i].PricePerUnit, 2)
			req.Ingredients[i].TotalPrice = normalizeFloat(req.Ingredients[i].TotalPrice, 2)
		}
	}

	// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏–ª–∏ –Ω–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
	outputQty := sf.OutputQuantity
	if req.OutputQuantity != nil && *req.OutputQuantity > 0 {
		outputQty = normalizeFloat(*req.OutputQuantity, 3)
		sf.OutputQuantity = outputQty
	}

	// –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
	if len(req.Ingredients) > 0 {
		costPerUnit := calculateCostPerUnit(req.Ingredients, outputQty)
		sf.CostPerUnit = costPerUnit
		sf.TotalCost = normalizeFloat(costPerUnit*outputQty, 2)
	} else if req.OutputQuantity != nil {
		// –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
		sf.TotalCost = normalizeFloat(sf.CostPerUnit*outputQty, 2)
	}
	sf.UpdatedAt = time.Now()

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx := database.DB.Begin()
	if tx.Error != nil {
		log.Printf("Error starting transaction: %v", tx.Error)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to update semi-finished")
		return
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç
	if err := tx.Save(&sf).Error; err != nil {
		tx.Rollback()
		log.Printf("Error updating semi-finished: %v", err)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to update semi-finished")
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
	if len(req.Ingredients) > 0 {
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
		if err := tx.Where("semi_finished_id = ?", id).Delete(&models.SemiFinishedIngredient{}).Error; err != nil {
			tx.Rollback()
			log.Printf("Error deleting old ingredients: %v", err)
			utils.RespondWithError(w, http.StatusInternalServerError, "Failed to update ingredients")
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
		for _, ing := range req.Ingredients {
			ingredient := models.SemiFinishedIngredient{
				ID:             uuid.New().String(),
				SemiFinishedID: id,
				IngredientID:   ing.IngredientID,
				IngredientName: ing.IngredientName,
				Quantity:       ing.Quantity,
				Unit:           ing.Unit,
				PricePerUnit:   ing.PricePerUnit,
				TotalPrice:     ing.TotalPrice,
			}
			if err := tx.Create(&ingredient).Error; err != nil {
				tx.Rollback()
				log.Printf("Error adding ingredient: %v", err)
				utils.RespondWithError(w, http.StatusInternalServerError, "Failed to update ingredients")
				return
			}
		}
	}

	// –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err := tx.Commit().Error; err != nil {
		log.Printf("Error committing transaction: %v", err)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to save changes")
		return
	}

	log.Printf("üì¶ Semi-finished '%s' –æ–±–Ω–æ–≤–ª—ë–Ω: %.3f %s, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å = %.2f ‚ÇΩ/–µ–¥, –≤—Å–µ–≥–æ = %.2f ‚ÇΩ (ID: %s)",
		sf.Name, sf.OutputQuantity, sf.OutputUnit, sf.CostPerUnit, sf.TotalCost, id)
	utils.RespondWithJSON(w, http.StatusOK, map[string]string{"message": "Semi-finished updated successfully"})
}

// DeleteSemiFinished —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç
func DeleteSemiFinished(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx := database.DB.Begin()
	if tx.Error != nil {
		log.Printf("Error starting transaction: %v", tx.Error)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to delete semi-finished")
		return
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// –£–¥–∞–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
	if err := tx.Where("semi_finished_id = ?", id).Delete(&models.SemiFinishedIngredient{}).Error; err != nil {
		tx.Rollback()
		log.Printf("Error deleting ingredients: %v", err)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to delete semi-finished")
		return
	}

	// –£–¥–∞–ª—è–µ–º –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç
	result := tx.Delete(&models.SemiFinished{}, "id = ?", id)
	if result.Error != nil {
		tx.Rollback()
		log.Printf("Error deleting semi-finished: %v", result.Error)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to delete semi-finished")
		return
	}

	if result.RowsAffected == 0 {
		tx.Rollback()
		utils.RespondWithError(w, http.StatusNotFound, "Semi-finished not found")
		return
	}

	// –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	if err := tx.Commit().Error; err != nil {
		log.Printf("Error committing transaction: %v", err)
		utils.RespondWithError(w, http.StatusInternalServerError, "Failed to delete semi-finished")
		return
	}

	log.Printf("‚úÖ Semi-finished deleted: ID %s", id)
	utils.RespondWithJSON(w, http.StatusOK, map[string]string{"message": "Semi-finished deleted successfully"})
}
