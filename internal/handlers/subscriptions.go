package handlers

import (
	"encoding/json"
	"log"
	"net/http"

	"github.com/dmitrijfomin/menu-fodifood/backend/internal/services"
	"github.com/gorilla/mux"
)

var subscriptionService = services.NewSubscriptionService()

// SubscribeRequest –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é)
type SubscribeRequest struct {
	TokensAmount int64 `json:"tokensAmount"`
}

// üí∞ POST /api/businesses/{id}/subscribe
func SubscribeToBusiness(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	businessID := vars["id"]

	// TODO: –ü–æ–ª—É—á–∏—Ç—å userID –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	// –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID
	userID := r.Header.Get("X-User-ID")
	if userID == "" {
		http.Error(w, "User ID required (X-User-ID header)", http.StatusUnauthorized)
		return
	}

	var input SubscribeRequest
	if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è
	if input.TokensAmount <= 0 {
		http.Error(w, "Tokens amount must be positive", http.StatusBadRequest)
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤)
	subscription, transaction, err := subscriptionService.Subscribe(userID, businessID, input.TokensAmount)
	if err != nil {
		log.Printf("[SUBSCRIPTION] ‚ùå Error subscribing: %v", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"message":      "‚úÖ Successfully subscribed to business",
		"subscription": subscription,
		"transaction":  transaction,
	})
}

// ‚ùå DELETE /api/businesses/{id}/unsubscribe
func UnsubscribeFromBusiness(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	businessID := vars["id"]

	// TODO: –ü–æ–ª—É—á–∏—Ç—å userID –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	userID := r.Header.Get("X-User-ID")
	if userID == "" {
		http.Error(w, "User ID required (X-User-ID header)", http.StatusUnauthorized)
		return
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ)
	if err := subscriptionService.Unsubscribe(userID, businessID); err != nil {
		log.Printf("[SUBSCRIPTION] ‚ùå Error unsubscribing: %v", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"message": "‚úÖ Successfully unsubscribed from business",
	})
}

// üìã GET /api/users/{id}/subscriptions
func GetUserSubscriptions(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	userID := vars["id"]

	// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∏–π –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –≤–∏–¥–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// (–ª–∏–±–æ —ç—Ç–æ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ª–∏–±–æ –∞–¥–º–∏–Ω)

	subscriptions, err := subscriptionService.GetUserSubscriptions(userID)
	if err != nil {
		log.Printf("[SUBSCRIPTION] ‚ùå Error fetching subscriptions: %v", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"message":       "‚úÖ User subscriptions fetched",
		"count":         len(subscriptions),
		"subscriptions": subscriptions,
	})
}

// üìä GET /api/businesses/{id}/subscribers
func GetBusinessSubscribers(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	businessID := vars["id"]

	subscribers, err := subscriptionService.GetBusinessSubscribers(businessID)
	if err != nil {
		log.Printf("[SUBSCRIPTION] ‚ùå Error fetching subscribers: %v", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É
	var totalInvested float64
	var totalTokensSold int64
	for _, sub := range subscribers {
		totalInvested += sub.Invested
		totalTokensSold += sub.TokensOwned
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"message":        "‚úÖ Business subscribers fetched",
		"subscriberCount": len(subscribers),
		"totalInvested":  totalInvested,
		"totalTokensSold": totalTokensSold,
		"subscribers":    subscribers,
	})
}

// üìä GET /api/subscriptions/stats
func GetSubscriptionStats(w http.ResponseWriter, r *http.Request) {
	businessID := r.URL.Query().Get("businessId")
	userID := r.URL.Query().Get("userId")

	if businessID == "" || userID == "" {
		http.Error(w, "Both businessId and userId query parameters required", http.StatusBadRequest)
		return
	}

	subscription, err := subscriptionService.GetSubscriptionStats(userID, businessID)
	if err != nil {
		log.Printf("[SUBSCRIPTION] ‚ùå Error fetching subscription stats: %v", err)
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"message":      "‚úÖ Subscription stats fetched",
		"subscription": subscription,
	})
}
